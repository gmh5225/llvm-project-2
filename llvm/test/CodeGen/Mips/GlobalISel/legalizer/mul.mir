# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
# RUN: llc -O0 -mtriple=mipsel-linux-gnu -run-pass=legalizer -verify-machineinstrs %s -o - | FileCheck %s -check-prefixes=MIPS32
--- |

  define void @mul_i32() {entry: ret void}
  define void @mul_i8_sext() {entry: ret void}
  define void @mul_i8_zext() {entry: ret void}
  define void @mul_i8_aext() {entry: ret void}
  define void @mul_i16_sext() {entry: ret void}
  define void @mul_i16_zext() {entry: ret void}
  define void @mul_i16_aext() {entry: ret void}
  define void @mul_i64() {entry: ret void}
  define void @mul_i128() {entry: ret void}
  define void @umulh_i64() {entry: ret void}
  define void @umul_with_overflow(i32 %lhs, i32 %rhs, ptr %pmul, ptr %pcarry_flag) { ret void }

...
---
name:            mul_i32
alignment:       4
tracksRegLiveness: true
body:             |
  bb.0.entry:
    liveins: $a0, $a1

    ; MIPS32-LABEL: name: mul_i32
    ; MIPS32: liveins: $a0, $a1
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[COPY1]]
    ; MIPS32-NEXT: $v0 = COPY [[MUL]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0
    %0:_(s32) = COPY $a0
    %1:_(s32) = COPY $a1
    %2:_(s32) = G_MUL %0, %1
    $v0 = COPY %2(s32)
    RetRA implicit $v0

...
---
name:            mul_i8_sext
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1

    ; MIPS32-LABEL: name: mul_i8_sext
    ; MIPS32: liveins: $a0, $a1
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY1]], [[COPY]]
    ; MIPS32-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 24
    ; MIPS32-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[MUL]], [[C]](s32)
    ; MIPS32-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; MIPS32-NEXT: $v0 = COPY [[ASHR]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0
    %2:_(s32) = COPY $a0
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a1
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_MUL %1, %0
    %5:_(s32) = G_SEXT %4(s8)
    $v0 = COPY %5(s32)
    RetRA implicit $v0

...
---
name:            mul_i8_zext
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1

    ; MIPS32-LABEL: name: mul_i8_zext
    ; MIPS32: liveins: $a0, $a1
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY1]], [[COPY]]
    ; MIPS32-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 255
    ; MIPS32-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[MUL]], [[C]]
    ; MIPS32-NEXT: $v0 = COPY [[AND]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0
    %2:_(s32) = COPY $a0
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a1
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_MUL %1, %0
    %5:_(s32) = G_ZEXT %4(s8)
    $v0 = COPY %5(s32)
    RetRA implicit $v0

...
---
name:            mul_i8_aext
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1

    ; MIPS32-LABEL: name: mul_i8_aext
    ; MIPS32: liveins: $a0, $a1
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY1]], [[COPY]]
    ; MIPS32-NEXT: $v0 = COPY [[MUL]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0
    %2:_(s32) = COPY $a0
    %0:_(s8) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a1
    %1:_(s8) = G_TRUNC %3(s32)
    %4:_(s8) = G_MUL %1, %0
    %5:_(s32) = G_ANYEXT %4(s8)
    $v0 = COPY %5(s32)
    RetRA implicit $v0

...
---
name:            mul_i16_sext
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1

    ; MIPS32-LABEL: name: mul_i16_sext
    ; MIPS32: liveins: $a0, $a1
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY1]], [[COPY]]
    ; MIPS32-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 16
    ; MIPS32-NEXT: [[SHL:%[0-9]+]]:_(s32) = G_SHL [[MUL]], [[C]](s32)
    ; MIPS32-NEXT: [[ASHR:%[0-9]+]]:_(s32) = G_ASHR [[SHL]], [[C]](s32)
    ; MIPS32-NEXT: $v0 = COPY [[ASHR]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0
    %2:_(s32) = COPY $a0
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a1
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_MUL %1, %0
    %5:_(s32) = G_SEXT %4(s16)
    $v0 = COPY %5(s32)
    RetRA implicit $v0

...
---
name:            mul_i16_zext
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1

    ; MIPS32-LABEL: name: mul_i16_zext
    ; MIPS32: liveins: $a0, $a1
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY1]], [[COPY]]
    ; MIPS32-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 65535
    ; MIPS32-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[MUL]], [[C]]
    ; MIPS32-NEXT: $v0 = COPY [[AND]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0
    %2:_(s32) = COPY $a0
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a1
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_MUL %1, %0
    %5:_(s32) = G_ZEXT %4(s16)
    $v0 = COPY %5(s32)
    RetRA implicit $v0

...
---
name:            mul_i16_aext
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1

    ; MIPS32-LABEL: name: mul_i16_aext
    ; MIPS32: liveins: $a0, $a1
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY1]], [[COPY]]
    ; MIPS32-NEXT: $v0 = COPY [[MUL]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0
    %2:_(s32) = COPY $a0
    %0:_(s16) = G_TRUNC %2(s32)
    %3:_(s32) = COPY $a1
    %1:_(s16) = G_TRUNC %3(s32)
    %4:_(s16) = G_MUL %1, %0
    %5:_(s32) = G_ANYEXT %4(s16)
    $v0 = COPY %5(s32)
    RetRA implicit $v0

...
---
name:            mul_i64
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1, $a2, $a3

    ; MIPS32-LABEL: name: mul_i64
    ; MIPS32: liveins: $a0, $a1, $a2, $a3
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a2
    ; MIPS32-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a3
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY2]], [[COPY]]
    ; MIPS32-NEXT: [[MUL1:%[0-9]+]]:_(s32) = G_MUL [[COPY3]], [[COPY]]
    ; MIPS32-NEXT: [[MUL2:%[0-9]+]]:_(s32) = G_MUL [[COPY2]], [[COPY1]]
    ; MIPS32-NEXT: [[UMULH:%[0-9]+]]:_(s32) = G_UMULH [[COPY2]], [[COPY]]
    ; MIPS32-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[MUL1]], [[MUL2]]
    ; MIPS32-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[ADD]], [[UMULH]]
    ; MIPS32-NEXT: $v0 = COPY [[MUL]](s32)
    ; MIPS32-NEXT: $v1 = COPY [[ADD1]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0, implicit $v1
    %2:_(s32) = COPY $a0
    %3:_(s32) = COPY $a1
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a2
    %5:_(s32) = COPY $a3
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_MUL %1, %0
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $v0 = COPY %7(s32)
    $v1 = COPY %8(s32)
    RetRA implicit $v0, implicit $v1

...
---
name:            mul_i128
alignment:       4
tracksRegLiveness: true
fixedStack:
  - { id: 0, offset: 28, size: 4, alignment: 4, stack-id: default, isImmutable: true }
  - { id: 1, offset: 24, size: 4, alignment: 8, stack-id: default, isImmutable: true }
  - { id: 2, offset: 20, size: 4, alignment: 4, stack-id: default, isImmutable: true }
  - { id: 3, offset: 16, size: 4, alignment: 8, stack-id: default, isImmutable: true }
body:             |
  bb.1.entry:
    liveins: $a0, $a1, $a2, $a3

    ; MIPS32-LABEL: name: mul_i128
    ; MIPS32: liveins: $a0, $a1, $a2, $a3
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a2
    ; MIPS32-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a3
    ; MIPS32-NEXT: [[FRAME_INDEX:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.0
    ; MIPS32-NEXT: [[LOAD:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX]](p0) :: (load (s32) from %fixed-stack.0, align 8)
    ; MIPS32-NEXT: [[FRAME_INDEX1:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.1
    ; MIPS32-NEXT: [[LOAD1:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX1]](p0) :: (load (s32) from %fixed-stack.1)
    ; MIPS32-NEXT: [[FRAME_INDEX2:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.2
    ; MIPS32-NEXT: [[LOAD2:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX2]](p0) :: (load (s32) from %fixed-stack.2, align 8)
    ; MIPS32-NEXT: [[FRAME_INDEX3:%[0-9]+]]:_(p0) = G_FRAME_INDEX %fixed-stack.3
    ; MIPS32-NEXT: [[LOAD3:%[0-9]+]]:_(s32) = G_LOAD [[FRAME_INDEX3]](p0) :: (load (s32) from %fixed-stack.3)
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[LOAD]], [[COPY]]
    ; MIPS32-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; MIPS32-NEXT: [[MUL1:%[0-9]+]]:_(s32) = G_MUL [[LOAD1]], [[COPY]]
    ; MIPS32-NEXT: [[MUL2:%[0-9]+]]:_(s32) = G_MUL [[LOAD]], [[COPY1]]
    ; MIPS32-NEXT: [[UMULH:%[0-9]+]]:_(s32) = G_UMULH [[LOAD]], [[COPY]]
    ; MIPS32-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[MUL1]], [[MUL2]]
    ; MIPS32-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[MUL2]]
    ; MIPS32-NEXT: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; MIPS32-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY4]], [[UMULH]]
    ; MIPS32-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD1]](s32), [[COPY4]]
    ; MIPS32-NEXT: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[ADD1]], [[ICMP]]
    ; MIPS32-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD2]](s32), [[C]]
    ; MIPS32-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP2]], [[ICMP]]
    ; MIPS32-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP1]], [[AND]]
    ; MIPS32-NEXT: [[COPY5:%[0-9]+]]:_(s32) = COPY [[ADD2]](s32)
    ; MIPS32-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; MIPS32-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[OR]], [[C1]]
    ; MIPS32-NEXT: [[ADD3:%[0-9]+]]:_(s32) = G_ADD [[C]], [[AND1]]
    ; MIPS32-NEXT: [[COPY6:%[0-9]+]]:_(s32) = COPY [[ADD3]](s32)
    ; MIPS32-NEXT: [[MUL3:%[0-9]+]]:_(s32) = G_MUL [[LOAD2]], [[COPY]]
    ; MIPS32-NEXT: [[MUL4:%[0-9]+]]:_(s32) = G_MUL [[LOAD1]], [[COPY1]]
    ; MIPS32-NEXT: [[MUL5:%[0-9]+]]:_(s32) = G_MUL [[LOAD]], [[COPY2]]
    ; MIPS32-NEXT: [[UMULH1:%[0-9]+]]:_(s32) = G_UMULH [[LOAD1]], [[COPY]]
    ; MIPS32-NEXT: [[UMULH2:%[0-9]+]]:_(s32) = G_UMULH [[LOAD]], [[COPY1]]
    ; MIPS32-NEXT: [[ADD4:%[0-9]+]]:_(s32) = G_ADD [[MUL3]], [[MUL4]]
    ; MIPS32-NEXT: [[ICMP3:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD4]](s32), [[MUL4]]
    ; MIPS32-NEXT: [[COPY7:%[0-9]+]]:_(s32) = COPY [[ADD4]](s32)
    ; MIPS32-NEXT: [[ADD5:%[0-9]+]]:_(s32) = G_ADD [[COPY7]], [[MUL5]]
    ; MIPS32-NEXT: [[ICMP4:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD5]](s32), [[COPY7]]
    ; MIPS32-NEXT: [[ADD6:%[0-9]+]]:_(s32) = G_ADD [[ADD5]], [[ICMP3]]
    ; MIPS32-NEXT: [[ICMP5:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD6]](s32), [[C]]
    ; MIPS32-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP5]], [[ICMP3]]
    ; MIPS32-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[ICMP4]], [[AND2]]
    ; MIPS32-NEXT: [[COPY8:%[0-9]+]]:_(s32) = COPY [[ADD6]](s32)
    ; MIPS32-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[OR1]], [[C1]]
    ; MIPS32-NEXT: [[ADD7:%[0-9]+]]:_(s32) = G_ADD [[C]], [[AND3]]
    ; MIPS32-NEXT: [[COPY9:%[0-9]+]]:_(s32) = COPY [[ADD7]](s32)
    ; MIPS32-NEXT: [[ADD8:%[0-9]+]]:_(s32) = G_ADD [[COPY8]], [[UMULH1]]
    ; MIPS32-NEXT: [[ICMP6:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD8]](s32), [[COPY8]]
    ; MIPS32-NEXT: [[ADD9:%[0-9]+]]:_(s32) = G_ADD [[ADD8]], [[ICMP3]]
    ; MIPS32-NEXT: [[ICMP7:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD9]](s32), [[C]]
    ; MIPS32-NEXT: [[AND4:%[0-9]+]]:_(s32) = G_AND [[ICMP7]], [[ICMP3]]
    ; MIPS32-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[ICMP6]], [[AND4]]
    ; MIPS32-NEXT: [[COPY10:%[0-9]+]]:_(s32) = COPY [[ADD9]](s32)
    ; MIPS32-NEXT: [[ADD10:%[0-9]+]]:_(s32) = G_ADD [[COPY9]], [[C]]
    ; MIPS32-NEXT: [[AND5:%[0-9]+]]:_(s32) = G_AND [[OR2]], [[C1]]
    ; MIPS32-NEXT: [[ADD11:%[0-9]+]]:_(s32) = G_ADD [[ADD10]], [[AND5]]
    ; MIPS32-NEXT: [[COPY11:%[0-9]+]]:_(s32) = COPY [[ADD11]](s32)
    ; MIPS32-NEXT: [[ADD12:%[0-9]+]]:_(s32) = G_ADD [[COPY10]], [[UMULH2]]
    ; MIPS32-NEXT: [[ICMP8:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD12]](s32), [[COPY10]]
    ; MIPS32-NEXT: [[ADD13:%[0-9]+]]:_(s32) = G_ADD [[ADD12]], [[ICMP3]]
    ; MIPS32-NEXT: [[ICMP9:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD13]](s32), [[C]]
    ; MIPS32-NEXT: [[AND6:%[0-9]+]]:_(s32) = G_AND [[ICMP9]], [[ICMP3]]
    ; MIPS32-NEXT: [[OR3:%[0-9]+]]:_(s32) = G_OR [[ICMP8]], [[AND6]]
    ; MIPS32-NEXT: [[COPY12:%[0-9]+]]:_(s32) = COPY [[ADD13]](s32)
    ; MIPS32-NEXT: [[ADD14:%[0-9]+]]:_(s32) = G_ADD [[COPY11]], [[C]]
    ; MIPS32-NEXT: [[AND7:%[0-9]+]]:_(s32) = G_AND [[OR3]], [[C1]]
    ; MIPS32-NEXT: [[ADD15:%[0-9]+]]:_(s32) = G_ADD [[ADD14]], [[AND7]]
    ; MIPS32-NEXT: [[COPY13:%[0-9]+]]:_(s32) = COPY [[ADD15]](s32)
    ; MIPS32-NEXT: [[ADD16:%[0-9]+]]:_(s32) = G_ADD [[COPY12]], [[COPY6]]
    ; MIPS32-NEXT: [[ICMP10:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD16]](s32), [[COPY12]]
    ; MIPS32-NEXT: [[ADD17:%[0-9]+]]:_(s32) = G_ADD [[ADD16]], [[ICMP3]]
    ; MIPS32-NEXT: [[ICMP11:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD17]](s32), [[C]]
    ; MIPS32-NEXT: [[AND8:%[0-9]+]]:_(s32) = G_AND [[ICMP11]], [[ICMP3]]
    ; MIPS32-NEXT: [[OR4:%[0-9]+]]:_(s32) = G_OR [[ICMP10]], [[AND8]]
    ; MIPS32-NEXT: [[COPY14:%[0-9]+]]:_(s32) = COPY [[ADD17]](s32)
    ; MIPS32-NEXT: [[ADD18:%[0-9]+]]:_(s32) = G_ADD [[COPY13]], [[C]]
    ; MIPS32-NEXT: [[AND9:%[0-9]+]]:_(s32) = G_AND [[OR4]], [[C1]]
    ; MIPS32-NEXT: [[ADD19:%[0-9]+]]:_(s32) = G_ADD [[ADD18]], [[AND9]]
    ; MIPS32-NEXT: [[COPY15:%[0-9]+]]:_(s32) = COPY [[ADD19]](s32)
    ; MIPS32-NEXT: [[MUL6:%[0-9]+]]:_(s32) = G_MUL [[LOAD3]], [[COPY]]
    ; MIPS32-NEXT: [[MUL7:%[0-9]+]]:_(s32) = G_MUL [[LOAD2]], [[COPY1]]
    ; MIPS32-NEXT: [[MUL8:%[0-9]+]]:_(s32) = G_MUL [[LOAD1]], [[COPY2]]
    ; MIPS32-NEXT: [[MUL9:%[0-9]+]]:_(s32) = G_MUL [[LOAD]], [[COPY3]]
    ; MIPS32-NEXT: [[UMULH3:%[0-9]+]]:_(s32) = G_UMULH [[LOAD2]], [[COPY]]
    ; MIPS32-NEXT: [[UMULH4:%[0-9]+]]:_(s32) = G_UMULH [[LOAD1]], [[COPY1]]
    ; MIPS32-NEXT: [[UMULH5:%[0-9]+]]:_(s32) = G_UMULH [[LOAD]], [[COPY2]]
    ; MIPS32-NEXT: [[ADD20:%[0-9]+]]:_(s32) = G_ADD [[MUL6]], [[MUL7]]
    ; MIPS32-NEXT: [[ADD21:%[0-9]+]]:_(s32) = G_ADD [[ADD20]], [[MUL8]]
    ; MIPS32-NEXT: [[ADD22:%[0-9]+]]:_(s32) = G_ADD [[ADD21]], [[MUL9]]
    ; MIPS32-NEXT: [[ADD23:%[0-9]+]]:_(s32) = G_ADD [[ADD22]], [[UMULH3]]
    ; MIPS32-NEXT: [[ADD24:%[0-9]+]]:_(s32) = G_ADD [[ADD23]], [[UMULH4]]
    ; MIPS32-NEXT: [[ADD25:%[0-9]+]]:_(s32) = G_ADD [[ADD24]], [[UMULH5]]
    ; MIPS32-NEXT: [[ADD26:%[0-9]+]]:_(s32) = G_ADD [[ADD25]], [[COPY15]]
    ; MIPS32-NEXT: $v0 = COPY [[MUL]](s32)
    ; MIPS32-NEXT: $v1 = COPY [[COPY5]](s32)
    ; MIPS32-NEXT: $a0 = COPY [[COPY14]](s32)
    ; MIPS32-NEXT: $a1 = COPY [[ADD26]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0, implicit $v1, implicit $a0, implicit $a1
    %2:_(s32) = COPY $a0
    %3:_(s32) = COPY $a1
    %4:_(s32) = COPY $a2
    %5:_(s32) = COPY $a3
    %0:_(s128) = G_MERGE_VALUES %2(s32), %3(s32), %4(s32), %5(s32)
    %10:_(p0) = G_FRAME_INDEX %fixed-stack.3
    %6:_(s32) = G_LOAD %10(p0) :: (load (s32) from %fixed-stack.3, align 8)
    %11:_(p0) = G_FRAME_INDEX %fixed-stack.2
    %7:_(s32) = G_LOAD %11(p0) :: (load (s32) from %fixed-stack.2)
    %12:_(p0) = G_FRAME_INDEX %fixed-stack.1
    %8:_(s32) = G_LOAD %12(p0) :: (load (s32) from %fixed-stack.1, align 8)
    %13:_(p0) = G_FRAME_INDEX %fixed-stack.0
    %9:_(s32) = G_LOAD %13(p0) :: (load (s32) from %fixed-stack.0)
    %1:_(s128) = G_MERGE_VALUES %6(s32), %7(s32), %8(s32), %9(s32)
    %14:_(s128) = G_MUL %1, %0
    %15:_(s32), %16:_(s32), %17:_(s32), %18:_(s32) = G_UNMERGE_VALUES %14(s128)
    $v0 = COPY %15(s32)
    $v1 = COPY %16(s32)
    $a0 = COPY %17(s32)
    $a1 = COPY %18(s32)
    RetRA implicit $v0, implicit $v1, implicit $a0, implicit $a1

...
---
name:            umulh_i64
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1.entry:
    liveins: $a0, $a1, $a2, $a3

    ; MIPS32-LABEL: name: umulh_i64
    ; MIPS32: liveins: $a0, $a1, $a2, $a3
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[COPY2:%[0-9]+]]:_(s32) = COPY $a2
    ; MIPS32-NEXT: [[COPY3:%[0-9]+]]:_(s32) = COPY $a3
    ; MIPS32-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY3]], [[COPY]]
    ; MIPS32-NEXT: [[MUL1:%[0-9]+]]:_(s32) = G_MUL [[COPY2]], [[COPY1]]
    ; MIPS32-NEXT: [[UMULH:%[0-9]+]]:_(s32) = G_UMULH [[COPY2]], [[COPY]]
    ; MIPS32-NEXT: [[ADD:%[0-9]+]]:_(s32) = G_ADD [[MUL]], [[MUL1]]
    ; MIPS32-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD]](s32), [[MUL1]]
    ; MIPS32-NEXT: [[COPY4:%[0-9]+]]:_(s32) = COPY [[ADD]](s32)
    ; MIPS32-NEXT: [[ADD1:%[0-9]+]]:_(s32) = G_ADD [[COPY4]], [[UMULH]]
    ; MIPS32-NEXT: [[ICMP1:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD1]](s32), [[COPY4]]
    ; MIPS32-NEXT: [[ADD2:%[0-9]+]]:_(s32) = G_ADD [[ADD1]], [[ICMP]]
    ; MIPS32-NEXT: [[ICMP2:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD2]](s32), [[C]]
    ; MIPS32-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP2]], [[ICMP]]
    ; MIPS32-NEXT: [[OR:%[0-9]+]]:_(s32) = G_OR [[ICMP1]], [[AND]]
    ; MIPS32-NEXT: [[COPY5:%[0-9]+]]:_(s32) = COPY [[ADD2]](s32)
    ; MIPS32-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; MIPS32-NEXT: [[AND1:%[0-9]+]]:_(s32) = G_AND [[OR]], [[C1]]
    ; MIPS32-NEXT: [[ADD3:%[0-9]+]]:_(s32) = G_ADD [[C]], [[AND1]]
    ; MIPS32-NEXT: [[COPY6:%[0-9]+]]:_(s32) = COPY [[ADD3]](s32)
    ; MIPS32-NEXT: [[MUL2:%[0-9]+]]:_(s32) = G_MUL [[COPY3]], [[COPY1]]
    ; MIPS32-NEXT: [[UMULH1:%[0-9]+]]:_(s32) = G_UMULH [[COPY3]], [[COPY]]
    ; MIPS32-NEXT: [[UMULH2:%[0-9]+]]:_(s32) = G_UMULH [[COPY2]], [[COPY1]]
    ; MIPS32-NEXT: [[ADD4:%[0-9]+]]:_(s32) = G_ADD [[MUL2]], [[UMULH1]]
    ; MIPS32-NEXT: [[ICMP3:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD4]](s32), [[UMULH1]]
    ; MIPS32-NEXT: [[COPY7:%[0-9]+]]:_(s32) = COPY [[ADD4]](s32)
    ; MIPS32-NEXT: [[ADD5:%[0-9]+]]:_(s32) = G_ADD [[COPY7]], [[UMULH2]]
    ; MIPS32-NEXT: [[ICMP4:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD5]](s32), [[COPY7]]
    ; MIPS32-NEXT: [[ADD6:%[0-9]+]]:_(s32) = G_ADD [[ADD5]], [[ICMP3]]
    ; MIPS32-NEXT: [[ICMP5:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD6]](s32), [[C]]
    ; MIPS32-NEXT: [[AND2:%[0-9]+]]:_(s32) = G_AND [[ICMP5]], [[ICMP3]]
    ; MIPS32-NEXT: [[OR1:%[0-9]+]]:_(s32) = G_OR [[ICMP4]], [[AND2]]
    ; MIPS32-NEXT: [[COPY8:%[0-9]+]]:_(s32) = COPY [[ADD6]](s32)
    ; MIPS32-NEXT: [[AND3:%[0-9]+]]:_(s32) = G_AND [[OR1]], [[C1]]
    ; MIPS32-NEXT: [[ADD7:%[0-9]+]]:_(s32) = G_ADD [[C]], [[AND3]]
    ; MIPS32-NEXT: [[COPY9:%[0-9]+]]:_(s32) = COPY [[ADD7]](s32)
    ; MIPS32-NEXT: [[ADD8:%[0-9]+]]:_(s32) = G_ADD [[COPY8]], [[COPY6]]
    ; MIPS32-NEXT: [[ICMP6:%[0-9]+]]:_(s32) = G_ICMP intpred(ult), [[ADD8]](s32), [[COPY8]]
    ; MIPS32-NEXT: [[ADD9:%[0-9]+]]:_(s32) = G_ADD [[ADD8]], [[ICMP3]]
    ; MIPS32-NEXT: [[ICMP7:%[0-9]+]]:_(s32) = G_ICMP intpred(eq), [[ADD9]](s32), [[C]]
    ; MIPS32-NEXT: [[AND4:%[0-9]+]]:_(s32) = G_AND [[ICMP7]], [[ICMP3]]
    ; MIPS32-NEXT: [[OR2:%[0-9]+]]:_(s32) = G_OR [[ICMP6]], [[AND4]]
    ; MIPS32-NEXT: [[COPY10:%[0-9]+]]:_(s32) = COPY [[ADD9]](s32)
    ; MIPS32-NEXT: [[ADD10:%[0-9]+]]:_(s32) = G_ADD [[COPY9]], [[C]]
    ; MIPS32-NEXT: [[AND5:%[0-9]+]]:_(s32) = G_AND [[OR2]], [[C1]]
    ; MIPS32-NEXT: [[ADD11:%[0-9]+]]:_(s32) = G_ADD [[ADD10]], [[AND5]]
    ; MIPS32-NEXT: [[COPY11:%[0-9]+]]:_(s32) = COPY [[ADD11]](s32)
    ; MIPS32-NEXT: [[UMULH3:%[0-9]+]]:_(s32) = G_UMULH [[COPY3]], [[COPY1]]
    ; MIPS32-NEXT: [[ADD12:%[0-9]+]]:_(s32) = G_ADD [[UMULH3]], [[COPY11]]
    ; MIPS32-NEXT: $v0 = COPY [[COPY10]](s32)
    ; MIPS32-NEXT: $v1 = COPY [[ADD12]](s32)
    ; MIPS32-NEXT: RetRA implicit $v0, implicit $v1
    %2:_(s32) = COPY $a0
    %3:_(s32) = COPY $a1
    %0:_(s64) = G_MERGE_VALUES %2(s32), %3(s32)
    %4:_(s32) = COPY $a2
    %5:_(s32) = COPY $a3
    %1:_(s64) = G_MERGE_VALUES %4(s32), %5(s32)
    %6:_(s64) = G_UMULH %1, %0
    %7:_(s32), %8:_(s32) = G_UNMERGE_VALUES %6(s64)
    $v0 = COPY %7(s32)
    $v1 = COPY %8(s32)
    RetRA implicit $v0, implicit $v1

...
---
name:            umul_with_overflow
alignment:       4
tracksRegLiveness: true
body:             |
  bb.1 (%ir-block.0):
    liveins: $a0, $a1, $a2, $a3

    ; MIPS32-LABEL: name: umul_with_overflow
    ; MIPS32: liveins: $a0, $a1, $a2, $a3
    ; MIPS32-NEXT: {{  $}}
    ; MIPS32-NEXT: [[COPY:%[0-9]+]]:_(s32) = COPY $a0
    ; MIPS32-NEXT: [[COPY1:%[0-9]+]]:_(s32) = COPY $a1
    ; MIPS32-NEXT: [[COPY2:%[0-9]+]]:_(p0) = COPY $a2
    ; MIPS32-NEXT: [[COPY3:%[0-9]+]]:_(p0) = COPY $a3
    ; MIPS32-NEXT: [[UMULH:%[0-9]+]]:_(s32) = G_UMULH [[COPY]], [[COPY1]]
    ; MIPS32-NEXT: [[C:%[0-9]+]]:_(s32) = G_CONSTANT i32 0
    ; MIPS32-NEXT: [[MUL:%[0-9]+]]:_(s32) = G_MUL [[COPY]], [[COPY1]]
    ; MIPS32-NEXT: [[ICMP:%[0-9]+]]:_(s32) = G_ICMP intpred(ne), [[UMULH]](s32), [[C]]
    ; MIPS32-NEXT: [[C1:%[0-9]+]]:_(s32) = G_CONSTANT i32 1
    ; MIPS32-NEXT: [[AND:%[0-9]+]]:_(s32) = G_AND [[ICMP]], [[C1]]
    ; MIPS32-NEXT: G_STORE [[AND]](s32), [[COPY3]](p0) :: (store (s8) into %ir.pcarry_flag)
    ; MIPS32-NEXT: G_STORE [[MUL]](s32), [[COPY2]](p0) :: (store (s32) into %ir.pmul)
    ; MIPS32-NEXT: RetRA
    %0:_(s32) = COPY $a0
    %1:_(s32) = COPY $a1
    %2:_(p0) = COPY $a2
    %3:_(p0) = COPY $a3
    %4:_(s32), %5:_(s1) = G_UMULO %0, %1
    G_STORE %5(s1), %3(p0) :: (store (s1) into %ir.pcarry_flag)
    G_STORE %4(s32), %2(p0) :: (store (s32) into %ir.pmul)
    RetRA

...
